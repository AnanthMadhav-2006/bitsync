# -*- coding: utf-8 -*-
"""product_code.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19Vw0m10E3PTOF267nwV_e66mdFxZ4h3C
"""

import numpy as np
from itertools import combinations

def simulate_awgn_bpsk_channel(bits, snr_db):
  snr_linear=10**(snr_db/10)
  sigma=np.sqrt(1/snr_linear) #signal power is 1 (+/-1=signal) so SNR=(P=1)/sigma^2
  bpsk=2*bits-1 #(0,1)-->(-1,+1)
  noise=np.random.normal(0, sigma, bits.shape)
  received=bpsk+noise
  llr= 2*received/sigma**2
  return llr

def encoder(data_matrix, snr_db):
  data_matrix = np.array(data_matrix)
  d= data_matrix.shape[0]
  assert data_matrix.shape==(d,d)
  Lc_matrix =simulate_awgn_bpsk_channel(data_matrix, snr_db)
  parity_h={}
  parity_v={}
  for i in range(d):
    for j1, j2 in combinations(range(d),2):
      parity_h[(i,j1,j2)]=simulate_awgn_bpsk_channel(np.array(data_matrix[i,j1]^data_matrix[i,j2]),snr_db)
  for j in range(d):
    for i1,i2 in combinations(range(d),2):
      parity_v[(j,i1,i2)]=simulate_awgn_bpsk_channel(np.array(data_matrix[i1,j]^data_matrix[i2,j]), snr_db)
  return Lc_matrix, parity_h, parity_v

def min_sum_xor(l1,l2):
  return -np.sign(l1)*np.sign(l2)*np.minimum(np.abs(l1),np.abs(l2))
def decoder(Lc_matrix,prior_matrix,parity_h, parity_v,max_iters):
  prior_matrix=np.array(prior_matrix)
  d=Lc_matrix.shape[0]
  L=prior_matrix.copy()

  for _ in range(max_iters):
    L_horizontal=L.copy()
    for (i,j1,j2), parity in parity_h.items():
      ext_j1=min_sum_xor(L[i,j2]+Lc_matrix[i,j2],parity)
      ext_j2=min_sum_xor(L[i,j1]+Lc_matrix[i,j1],parity)
      L_horizontal[i,j1]+=ext_j1
      L_horizontal[i,j2]+=ext_j2
    L_vertical=L_horizontal.copy()
    for (j,i1,i2), parity in parity_v.items():
      ext_i1=min_sum_xor(L_horizontal[i2,j]+Lc_matrix[i2,j],parity)
      ext_i2=min_sum_xor(L_horizontal[i1,j]+Lc_matrix[i1,j],parity)
      L_vertical[i1,j]+=ext_i1
      L_vertical[i2,j]+=ext_i2
    L=L_vertical.copy()
    decoded_bits=(L>=0).astype(int)
  return L, decoded_bits

Lc_matrix, parity_h,parity_v=encoder([[1,0],[0,1]],10*np.log10(0.5))
print(Lc_matrix)
L, decoded_bits=decoder(Lc_matrix,[[0,0],[0,0]],parity_h,parity_v,2)
print(L)
print(decoded_bits)